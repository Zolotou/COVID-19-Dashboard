{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\Web-Projects\\\\COVID-19-Dashboard\\\\src\\\\components\\\\Map\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect } from 'react';\nimport classes from './Map.module.scss';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4themes_dark from \"@amcharts/amcharts4/themes/dark\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_dark);\nam4core.useTheme(am4themes_animated);\n\nfunction Map(props) {\n  _s();\n\n  useLayoutEffect(() => {\n    // Create map instance\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Create map polygon series\n\n    let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries()); // Exclude Antartica\n\n    polygonSeries.exclude = [\"AQ\"]; // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n\n    let polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.polygon.fillOpacity = 0.6; // Create hover state and set alternative fill color\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = chart.colors.getIndex(0); // Add image series\n\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    imageSeries.mapImages.template.propertyFields.longitude = \"longitude\";\n    imageSeries.mapImages.template.propertyFields.latitude = \"latitude\";\n    imageSeries.mapImages.template.tooltipText = \"{title}\";\n    imageSeries.mapImages.template.propertyFields.url = \"url\";\n    let circle = imageSeries.mapImages.template.createChild(am4core.Circle);\n    circle.radius = 3;\n    circle.propertyFields.fill = \"color\";\n    let circle2 = imageSeries.mapImages.template.createChild(am4core.Circle);\n    circle2.radius = 3;\n    circle2.propertyFields.fill = \"color\";\n    circle2.events.on(\"inited\", function (event) {\n      animateBullet(event.target);\n    });\n\n    function animateBullet(circle) {\n      let animation = circle.animate([{\n        property: \"scale\",\n        from: 1,\n        to: 5\n      }, {\n        property: \"opacity\",\n        from: 1,\n        to: 0\n      }], 1000, am4core.ease.circleOut);\n      animation.events.on(\"animationended\", function (event) {\n        animateBullet(event.target.object);\n      });\n    }\n\n    let colorSet = new am4core.ColorSet(); //todo - how to extract data to undependent file?\n\n    imageSeries.data = [{\n      \"title\": \"Brussels\",\n      \"latitude\": 50.8371,\n      \"longitude\": 4.3676,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Copenhagen\",\n      \"latitude\": 55.6763,\n      \"longitude\": 12.5681,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Paris\",\n      \"latitude\": 48.8567,\n      \"longitude\": 2.3510,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Reykjavik\",\n      \"latitude\": 64.1353,\n      \"longitude\": -21.8952,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Moscow\",\n      \"latitude\": 55.7558,\n      \"longitude\": 37.6176,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Madrid\",\n      \"latitude\": 40.4167,\n      \"longitude\": -3.7033,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"London\",\n      \"latitude\": 51.5002,\n      \"longitude\": -0.1262,\n      \"url\": \"http://www.google.co.uk\",\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Peking\",\n      \"latitude\": 39.9056,\n      \"longitude\": 116.3958,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"New Delhi\",\n      \"latitude\": 28.6353,\n      \"longitude\": 77.2250,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Tokyo\",\n      \"latitude\": 35.6785,\n      \"longitude\": 139.6823,\n      \"url\": \"http://www.google.co.jp\",\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Ankara\",\n      \"latitude\": 39.9439,\n      \"longitude\": 32.8560,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Buenos Aires\",\n      \"latitude\": -34.6118,\n      \"longitude\": -58.4173,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Brasilia\",\n      \"latitude\": -15.7801,\n      \"longitude\": -47.9292,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Ottawa\",\n      \"latitude\": 45.4235,\n      \"longitude\": -75.6979,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Washington\",\n      \"latitude\": 38.8921,\n      \"longitude\": -77.0241,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Kinshasa\",\n      \"latitude\": -4.3369,\n      \"longitude\": 15.3271,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Cairo\",\n      \"latitude\": 30.0571,\n      \"longitude\": 31.2272,\n      \"color\": colorSet.next()\n    }, {\n      \"title\": \"Pretoria\",\n      \"latitude\": -25.7463,\n      \"longitude\": 28.1876,\n      \"color\": colorSet.next()\n    }];\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chartdiv\",\n    className: classes.chartdiv\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"n7/vCynhJvM+pLkyL2DMQUF0odM=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["F:/Web-Projects/COVID-19-Dashboard/src/components/Map/Map.js"],"names":["React","useLayoutEffect","classes","am4core","am4maps","am4geodata_worldLow","am4themes_dark","am4themes_animated","useTheme","Map","props","chart","create","MapChart","geodata","projection","projections","Miller","polygonSeries","series","push","MapPolygonSeries","exclude","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","polygon","fillOpacity","hs","states","properties","fill","colors","getIndex","imageSeries","MapImageSeries","mapImages","propertyFields","longitude","latitude","url","circle","createChild","Circle","radius","circle2","events","on","event","animateBullet","target","animation","animate","property","from","to","ease","circleOut","object","colorSet","ColorSet","data","next","chartdiv"],"mappings":"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","sourcesContent":["import React, { useLayoutEffect } from 'react';\r\nimport classes from './Map.module.scss';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4themes_dark from \"@amcharts/amcharts4/themes/dark\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_dark);\r\nam4core.useTheme(am4themes_animated);\r\n\r\nfunction Map(props) {\r\n  useLayoutEffect(() => {\r\n// Create map instance\r\nlet chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n// Set map definition\r\nchart.geodata = am4geodata_worldLow;\r\n\r\n// Set projection\r\nchart.projection = new am4maps.projections.Miller();\r\n\r\n// Create map polygon series\r\nlet polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n\r\n// Exclude Antartica\r\npolygonSeries.exclude = [\"AQ\"];\r\n\r\n// Make map load polygon (like country names) data from GeoJSON\r\npolygonSeries.useGeodata = true;\r\n\r\n// Configure series\r\nlet polygonTemplate = polygonSeries.mapPolygons.template;\r\npolygonTemplate.tooltipText = \"{name}\";\r\npolygonTemplate.polygon.fillOpacity = 0.6;\r\n\r\n\r\n// Create hover state and set alternative fill color\r\nlet hs = polygonTemplate.states.create(\"hover\");\r\nhs.properties.fill = chart.colors.getIndex(0);\r\n\r\n// Add image series\r\nlet imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\nimageSeries.mapImages.template.propertyFields.longitude = \"longitude\";\r\nimageSeries.mapImages.template.propertyFields.latitude = \"latitude\";\r\nimageSeries.mapImages.template.tooltipText = \"{title}\";\r\nimageSeries.mapImages.template.propertyFields.url = \"url\";\r\n\r\nlet circle = imageSeries.mapImages.template.createChild(am4core.Circle);\r\ncircle.radius = 3;\r\ncircle.propertyFields.fill = \"color\";\r\n\r\nlet circle2 = imageSeries.mapImages.template.createChild(am4core.Circle);\r\ncircle2.radius = 3;\r\ncircle2.propertyFields.fill = \"color\";\r\n\r\n\r\ncircle2.events.on(\"inited\", function(event){\r\n  animateBullet(event.target);\r\n})\r\n\r\n\r\nfunction animateBullet(circle) {\r\n    let animation = circle.animate([{ property: \"scale\", from: 1, to: 5 }, { property: \"opacity\", from: 1, to: 0 }], 1000, am4core.ease.circleOut);\r\n    animation.events.on(\"animationended\", function(event){\r\n      animateBullet(event.target.object);\r\n    })\r\n}\r\n\r\nlet colorSet = new am4core.ColorSet();\r\n\r\n//todo - how to extract data to undependent file?\r\nimageSeries.data = [ {\r\n  \"title\": \"Brussels\",\r\n  \"latitude\": 50.8371,\r\n  \"longitude\": 4.3676,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Copenhagen\",\r\n  \"latitude\": 55.6763,\r\n  \"longitude\": 12.5681,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Paris\",\r\n  \"latitude\": 48.8567,\r\n  \"longitude\": 2.3510,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Reykjavik\",\r\n  \"latitude\": 64.1353,\r\n  \"longitude\": -21.8952,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Moscow\",\r\n  \"latitude\": 55.7558,\r\n  \"longitude\": 37.6176,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Madrid\",\r\n  \"latitude\": 40.4167,\r\n  \"longitude\": -3.7033,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"London\",\r\n  \"latitude\": 51.5002,\r\n  \"longitude\": -0.1262,\r\n  \"url\": \"http://www.google.co.uk\",\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Peking\",\r\n  \"latitude\": 39.9056,\r\n  \"longitude\": 116.3958,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"New Delhi\",\r\n  \"latitude\": 28.6353,\r\n  \"longitude\": 77.2250,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Tokyo\",\r\n  \"latitude\": 35.6785,\r\n  \"longitude\": 139.6823,\r\n  \"url\": \"http://www.google.co.jp\",\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Ankara\",\r\n  \"latitude\": 39.9439,\r\n  \"longitude\": 32.8560,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Buenos Aires\",\r\n  \"latitude\": -34.6118,\r\n  \"longitude\": -58.4173,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Brasilia\",\r\n  \"latitude\": -15.7801,\r\n  \"longitude\": -47.9292,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Ottawa\",\r\n  \"latitude\": 45.4235,\r\n  \"longitude\": -75.6979,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Washington\",\r\n  \"latitude\": 38.8921,\r\n  \"longitude\": -77.0241,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Kinshasa\",\r\n  \"latitude\": -4.3369,\r\n  \"longitude\": 15.3271,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Cairo\",\r\n  \"latitude\": 30.0571,\r\n  \"longitude\": 31.2272,\r\n  \"color\":colorSet.next()\r\n}, {\r\n  \"title\": \"Pretoria\",\r\n  \"latitude\": -25.7463,\r\n  \"longitude\": 28.1876,\r\n  \"color\":colorSet.next()\r\n} ];\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"chartdiv\" className={classes.chartdiv}></div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}